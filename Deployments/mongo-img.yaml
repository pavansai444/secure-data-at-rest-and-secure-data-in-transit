apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-luks-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /mnt/mongo-data-decrypted
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - minikube
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongo-sa
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      serviceAccountName: mongo-sa
      terminationGracePeriodSeconds: 60
      volumes:
        - name: secure-mount
          persistentVolumeClaim:
            claimName: mongo-pvc
      initContainers:
        - name: luks-unlock
          image: pavansaibalaga/luks-unlock
          securityContext:
            privileged: true
          command: ["sh"]
          args:
            - "-c"
            - |
              set -x
              cryptsetup luksClose luks-unlocked || echo "No existing mapping to close"
              dmsetup remove luks-unlocked 2>/dev/null || echo "Failed to remove with dmsetup"
              output=$(curl -s http://webapp:8080)   
              password=$(echo -n "$output" | cut -d':' -f2)
              echo -n $password | cryptsetup luksOpen /dev/loop12 luks-unlocked --key-file=-
              ls -la /dev/mapper/luks-unlocked || echo "Device not created"
              mkdir -p /mnt/mongo-data-decrypted
              mount /dev/mapper/luks-unlocked /mnt/mongo-data-decrypted
          volumeMounts:
            - name: secure-mount
              mountPath: /mnt/mongo-data-decrypted
      containers:
        - name: mongodb
          image: pavansaibalaga/mongo
          securityContext:
            privileged: true
          volumeMounts:
            - name: secure-mount
              mountPath: /data/db
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
        - name: luks-cleanup
          image: pavansaibalaga/luks-unlock
          securityContext:
            privileged: true
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - -c
                  - |
                    echo "Starting LUKS cleanup..."
                    # Ensure data is written to disk
                    sync
                    echo "Unmounting encrypted volume..."
                    umount /dev/mapper/luks-unlocked || echo "Failed to unmount"
                    echo "Closing LUKS device..."
                    cryptsetup luksClose luks-unlocked || echo "Failed to close LUKS device"
                    echo "LUKS cleanup completed"
          command: ["sh", "-c", "trap 'exit 0' TERM; while true; do sleep 1; done"]
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

